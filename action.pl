#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"Action.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'ACTION';
  package Action; # Remember to change name to avoid clashes with others
  
  use Git;
  
  use parent Exporter;
  
  use v5.14;
  
  our @EXPORT_OK = qw(getRef);
  
  sub getRef() {
    return $ENV{'GITHUB_REF'};
  }
ACTION

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE


use v5.14;

use lib qw(lib);

use Github::Actions qw(error_on_file);

my @files = @ARGV;

for my $file (@files ) {
  my $errorOutput = `yq eval $file 2>&1 1>/dev/null`;
  if ( $errorOutput ne "" ) {
    my ($line, $error) = $errorOutput =~ /line\s+(\d+)\:\s+(.+)/;
    error_on_file( "Error en el fichero YAML", $file, $line, $error );
  }
}

